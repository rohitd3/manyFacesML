{
  
    
        "post0": {
            "title": "What is pytorch?",
            "content": "!pip install torch torchvision !pip install torchviz !pip install --upgrade torch torchvision . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.0.1+cu118) Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.15.2+cu118) Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.12.0) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch) (4.5.0) Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.11.1) Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.1) Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.2) Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.0.0) Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch) (3.25.2) Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch) (16.0.5) Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.22.4) Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torchvision) (2.27.1) Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (8.4.0) Requirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2-&gt;torch) (2.1.2) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (1.26.15) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (2022.12.7) Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (2.0.12) Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (3.4) Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy-&gt;torch) (1.3.0) Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting torchviz Downloading torchviz-0.0.2.tar.gz (4.9 kB) Preparing metadata (setup.py) ... done Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from torchviz) (2.0.1+cu118) Requirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from torchviz) (0.20.1) Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (3.12.0) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (4.5.0) Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (1.11.1) Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (3.1) Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (3.1.2) Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch-&gt;torchviz) (2.0.0) Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch-&gt;torchviz) (3.25.2) Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch-&gt;torchviz) (16.0.5) Requirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2-&gt;torch-&gt;torchviz) (2.1.2) Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy-&gt;torch-&gt;torchviz) (1.3.0) Building wheels for collected packages: torchviz Building wheel for torchviz (setup.py) ... done Created wheel for torchviz: filename=torchviz-0.0.2-py3-none-any.whl size=4131 sha256=e83e4e348fd4a61aad2ea7d4851d11ee11497f670d070637da2c7c6c5f9f9279 Stored in directory: /root/.cache/pip/wheels/4c/97/88/a02973217949e0db0c9f4346d154085f4725f99c4f15a87094 Successfully built torchviz Installing collected packages: torchviz Successfully installed torchviz-0.0.2 Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.0.1+cu118) Requirement already satisfied: torchvision in /usr/local/lib/python3.10/dist-packages (0.15.2+cu118) Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.12.0) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch) (4.5.0) Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.11.1) Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.1) Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.2) Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.0.0) Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch) (3.25.2) Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0-&gt;torch) (16.0.5) Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from torchvision) (1.22.4) Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from torchvision) (2.27.1) Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /usr/local/lib/python3.10/dist-packages (from torchvision) (8.4.0) Requirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2-&gt;torch) (2.1.2) Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (1.26.15) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (2022.12.7) Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (2.0.12) Requirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests-&gt;torchvision) (3.4) Requirement already satisfied: mpmath&gt;=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy-&gt;torch) (1.3.0) . import os def restart_runtime(): os.kill(os.getpid(), 9) restart_runtime() . from google.colab import drive from google.colab import files from PIL import Image drive.mount(&#39;/content/gdrive/MyDrive/DNN_ML/face&#39;) data_directory_face = &#39;/content/gdrive/MyDrive/DNN_ML/face&#39; . # Keep the Image width, height a multiple of 4. #This will ensure after Conv2D with 5X5 filter, and MaxPool(2,2) TWICE, # the values height2, width2 are still integers ImageWidth=384 ImageHeight=384 #the most common choices for convolution filter kernel sizes appear to be square shape of sizes 3X3, 5X5 #smaller sized kernel allows for more granular information. Here 5X5 is used. #Maxpool is needed when the image is larger. It keeps the item with the maximum value. convKernelSize1 =5 convKernelSize2 =5 maxpoolKernelSize = 2 #conv1 Input Channel is default 3 for R, G, B channels directly from the colored Image convOutputChannel1 = 16 #convInputChannel2 is the same as the convOutputChannel1 convOutputChannel2 = 32 linearOut1 = 256 linearOut2 = 84 dropOutValue = 0.2 # for the first convolution and max pool height1=int((ImageHeight - convKernelSize1 + 1)/maxpoolKernelSize) width1=int((ImageWidth - convKernelSize1 + 1)/maxpoolKernelSize) # for the second convolution and max pool height2=int((height1 - convKernelSize2 + 1)/maxpoolKernelSize) width2=int((width1 - convKernelSize2 + 1)/maxpoolKernelSize) . print(&quot; ImageWidth = &quot;, ImageWidth) print(&quot; ImageHeight = &quot;, ImageHeight) print(&quot; width1 = &quot;, width1) print(&quot; height1 = &quot;, height1) print(&quot; width2 = &quot;, width2) print(&quot; height2 = &quot;, height2) . ImageWidth = 384 ImageHeight = 384 width1 = 190 height1 = 190 width2 = 93 height2 = 93 . batch_size = 16 # percentage of training set to use as validation test_size = 0.3 valid_size = 0.1 # Preprocessing steps # Horizontal Flip, Random Rotation, convert image array into PyTorch and normalize train_transform = transforms.Compose([ transforms.RandomHorizontalFlip(), transforms.RandomRotation(10), transforms.Resize(size=(ImageWidth,ImageHeight)), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) # need to keep these transforms, at least do resize all images to same size and co ]) . data = datasets.ImageFolder(data_directory_face,transform=train_transform) . The data needs to be split in Train, Test and validation set before training. . Train set will be used to train the model. | Validation set will be used for validating the model after each epoch. | Test set will be used to evaluate the model once it is trained. | . num_data = len(data) print(&quot;num_data = &quot;, num_data) indices_data = list(range(num_data)) np.random.shuffle(indices_data) #For test and training split_tt = int(np.floor(test_size * num_data)) # numpy.floor function operates element-wise on the input array, # returning a new array with the same shape as the input. # It rounds down each element of the input array to the nearest # integer that is less than or equal to that element train_idx, test_idx = indices_data[split_tt:], indices_data[:split_tt] print(&quot; n train_idx = &quot;, train_idx) print(&quot; n test_idx = &quot;, test_idx) #From training separate data For validation (for each epoch) num_train = len(train_idx) indices_train = list(range(num_train)) np.random.shuffle(indices_train) split_tv = int(np.floor(valid_size * num_train)) train_new_idx, valid_idx = indices_train[split_tv:],indices_train[:split_tv] print(&quot; n train_new_idx = &quot;, train_new_idx) print(&quot; n valid_idx = &quot;, valid_idx) # define samplers for obtaining training and validation batches train_sampler = SubsetRandomSampler(train_new_idx) valid_sampler = SubsetRandomSampler(valid_idx) test_sampler = SubsetRandomSampler(test_idx) . # train_loader = torch.utils.data.DataLoader(data, batch_size=batch_size, sampler=train_sampler, num_workers=1, transform=train_transform) train_loader = torch.utils.data.DataLoader(data, batch_size=batch_size, sampler=train_sampler, num_workers=1) # only running the data augmentation on the training data, double check if works valid_loader = torch.utils.data.DataLoader(data, batch_size=batch_size, sampler=valid_sampler, num_workers=1) test_loader = torch.utils.data.DataLoader(data, sampler = test_sampler, batch_size=batch_size, num_workers=1) # variable representing classes of the images classes = [0,1] # labeling either 0 (negative) or 1 (positive) total_length = len(test_loader)*batch_size + len(valid_loader)*batch_size + len(train_loader)*batch_size print(&quot;total_length = &quot;, total_length) . for batch in valid_loader: print(&quot;batch[0].size() = &quot;, batch[0].size()) . import matplotlib.pyplot as plt %matplotlib inline # helper function to un-normalize and display an image def imshow(img): img = img / 2 + 0.5 # unnormalize plt.imshow(np.transpose(img, (1, 2, 0))) # convert from Tensor image # obtain one batch of training images dataiter = iter(train_loader) images, labels = next(dataiter) images = images.numpy() # convert images to numpy for display # plot the images in the batch, along with the corresponding labels . num_of_image_to_display = 16 fig = plt.figure(figsize=(num_of_image_to_display, 4)) for idx in np.arange(num_of_image_to_display): ax = fig.add_subplot(2, int(num_of_image_to_display/2), idx+1, xticks=[], yticks=[]) imshow(images[idx]) ax.set_title(classes[labels[idx]]) display(plt.show()) plt.close() . import torch import numpy as np from torchvision import datasets import torchvision.transforms as transforms from torch.utils.data.sampler import SubsetRandomSampler import torch.nn as nn import torch.optim as optim import torch.utils.data as data import torchvision.models as models from torch.autograd import Variable . import torch.nn as nn import torch.nn.functional as F train_on_gpu = torch.cuda.is_available() print(&quot;train_on_gpu = &quot;, train_on_gpu) class Net(nn.Module): def __init__(self): super(Net, self).__init__() # define the two convolutional operations # conv1 Input Channel =3 for the R, G, B channels directly from the Image self.conv1 = nn.Conv2d(3, convOutputChannel1, convKernelSize1) self.conv2 = nn.Conv2d(convOutputChannel1, convOutputChannel2, convKernelSize2) # define the max pool operation self.pool = nn.MaxPool2d(maxpoolKernelSize, maxpoolKernelSize) self.dropout = nn.Dropout(dropOutValue) # define the Linear (fully connected) operations self.fc1 = nn.Linear(convOutputChannel2* height2 * width2, linearOut1) self.fc2 = nn.Linear(linearOut1, linearOut2) self.fc3 = nn.Linear(linearOut2, 2) self.softmax = nn.LogSoftmax(dim=1) def forward(self, x): # add sequence of convolutional, relu and max pooling layers x = self.pool(F.relu(self.conv1(x))) x = self.pool(F.relu(self.conv2(x))) x = self.dropout(x) # the linearization needs to start with = # of output channels * height2 * width2 x = x.view(-1, convOutputChannel2 * height2 * width2) x = F.relu(self.fc1(x)) x = self.dropout(F.relu(self.fc2(x))) x = self.softmax(self.fc3(x)) return x . Training the Model . Finally comes the training part. Here you need to decide two crucial things: Loss function and optimizer. There are various choices like SGD, Adam, etc.. for the optimizer. used Cross-Entropy loss, which is a popular choice in the case of classification problems. should also set a learning rate, which decides how fast your model learns. . model = Net() print(&quot;++++++++++++ print the model ++++++++&quot;) print(model) print(&quot;+++++++++++++++++++++++++++++++++++++&quot;) # move tensors to GPU if CUDA is available if train_on_gpu: model.cuda() . import torch.optim as optim # specify loss function criterion = torch.nn.CrossEntropyLoss() learning_rate = 0.003 # test with Stochastic gradient descent optimizer - optimizer = torch.optim.SGD(model.parameters(), lr = learning_rate, momentum= 0.9) . n_epochs = 5 # you may increase this number to train a final model valid_loss_min = np.Inf # track change in validation loss . def make_loss_graph(data_list_val, data_list_train): plt.close() plt.title(&quot;Training and Validation Loss per Epoch&quot;) val_label = &quot;Validation Loss &quot; train_label = &quot;Training Loss &quot; assert len(data_list_val) == len(data_list_train) length = len(data_list_train) - 1 plt.plot(data_list_val, label=val_label) plt.plot(data_list_train, label=train_label) #plt.xlim((epoch_skip, length)) plt.xlabel(&#39;Epochs&#39;) plt.legend() plt.grid() plt.axis([0, 10, 0, 10]) display(plt.show()) plt.close() . list_val_loss_all_epoch =[] list_train_loss_all_epoch =[] for epoch in range(1, n_epochs+1): print(&#39;####### EPOCH &#39;, epoch) # keep track of training and validation loss train_loss = 0.0 valid_loss = 0.0 train_items = 0.0 valid_items = 0.0 ################### # train the model # ################### model.train() print(&#39; len(train_loader.dataset) = &#39;, len(train_loader.dataset)) for data, target in train_loader: # move tensors to GPU if CUDA is available if train_on_gpu: data, target = data.cuda(), target.cuda() # clear the gradients of all optimized variables optimizer.zero_grad() # forward pass: compute predicted outputs by passing inputs to the model output = model(data) # calculate the batch loss loss = criterion(output, target) # backward pass: compute gradient of the loss with respect to model parameters loss.backward() # perform a single optimization step (parameter update) optimizer.step() # update training loss print(&#39; train loss item = &#39;, loss.item()*data.size(0)) train_loss += loss.item()*data.size(0) train_items +=1 ###################### # validate or evaluate the model # # To evaluate the model, it should be changed from model.train() to model.eval() ###################### model.eval() print(&#39; len(valid_loader.dataset) = &#39;, len(valid_loader.dataset)) for data, target in valid_loader: # move tensors to GPU if CUDA is available if train_on_gpu: data, target = data.cuda(), target.cuda() # forward pass: compute predicted outputs by passing inputs to the model output = model(data) # calculate the batch loss loss = criterion(output, target) # update average validation loss print(&#39; valid loss item = &#39;, loss.item()*data.size(0)) valid_loss += loss.item()*data.size(0) valid_items +=1 # calculate average losses print(&#39; n train_loss = &#39;, train_loss) print(&#39; valid_loss = &#39;, valid_loss) print(&#39; n train_items = &#39;, train_items) print(&#39; valid_items = &#39;, valid_items) #train_loss = train_loss/len(train_loader.dataset) # incorrect: this was averaging over 500 (the total amount of images available) #valid_loss = valid_loss/len(valid_loader.dataset) train_loss = train_loss/train_items # this is averaging correctly valid_loss = valid_loss/valid_items print(&#39; n average train_loss = &#39;, train_loss) print(&#39; average valid_loss = &#39;, valid_loss) list_val_loss_all_epoch.append(valid_loss) list_train_loss_all_epoch.append(train_loss) # print training/validation statistics print(&#39;Epoch: {} t Average Training Loss: {:.6f} t Average Validation Loss: {:.6f}&#39;.format( epoch, train_loss, valid_loss)) # save model if validation loss has decreased if valid_loss &lt;= valid_loss_min: print(&#39;Validation loss decreased ({:.6f} --&gt; {:.6f}). Saving model ...&#39;.format( valid_loss_min, valid_loss)) torch.save(model.state_dict(), &#39;model_cifar.pt&#39;) valid_loss_min = valid_loss make_loss_graph(list_val_loss_all_epoch, list_train_loss_all_epoch) . # Analysis of the Model # plotting loss and accuracy over epochs to see how it changed over training ###################################################### print(&quot; n **************** START TEST ******************* &quot;) # plot the accuracy # confusion matrix # dont train for 700 epochs - do for less ~20 # track test loss test_loss = 0.0 class_correct = list(0. for i in range(2)) class_total = list(0. for i in range(2)) model.eval() i=1 # iterate over test data len(test_loader) for data, target in test_loader: i=i+1 if len(target)!=batch_size: continue # move tensors to GPU if CUDA is available if train_on_gpu: data, target = data.cuda(), target.cuda() # forward pass: compute predicted outputs by passing inputs to the model output = model(data) # calculate the batch loss loss = criterion(output, target) # update test loss test_loss += loss.item()*data.size(0) # convert output probabilities to predicted class _, pred = torch.max(output, 1) # compare predictions to true label correct_tensor = pred.eq(target.data.view_as(pred)) correct = np.squeeze(correct_tensor.numpy()) if not train_on_gpu else np.squeeze(correct_tensor.cpu().numpy()) # calculate test accuracy for each object class # print(target) for i in range(batch_size): label = target.data[i] class_correct[label] += correct[i].item() class_total[label] += 1 # average test loss test_loss = test_loss/len(test_loader.dataset) print(&#39;Test Loss: {:.6f} n&#39;.format(test_loss)) for i in range(2): if class_total[i] &gt; 0: print(&#39;Test Accuracy of %5s: %2d%% (%2d/%2d)&#39; % ( classes[i], 100 * class_correct[i] / class_total[i], np.sum(class_correct[i]), np.sum(class_total[i]))) else: print(&#39;Test Accuracy of %5s: N/A (no training examples)&#39; % (classes[i])) print(&#39; nTest Accuracy (Overall): %2d%% (%2d/%2d)&#39; % ( 100. * np.sum(class_correct) / np.sum(class_total), np.sum(class_correct), np.sum(class_total))) .",
            "url": "https://rohitd3.github.io/manyFacesML/2023/05/21/CNN_faces.html",
            "relUrl": "/2023/05/21/CNN_faces.html",
            "date": " • May 21, 2023"
        }
        
    
  

  
  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rohitd3.github.io/manyFacesML/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}